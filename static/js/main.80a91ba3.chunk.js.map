{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","persistAtom","recoilPersist","categoryState","atom","key","default","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","App","basename","process","ReactDOM","render","StrictMode","theme","bgColor","textColor","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.80a91ba3.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport { recoilPersist } from \"recoil-persist\";\r\n\r\nconst { persistAtom } = recoilPersist();\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\n// enum can save \"TO_DO\" , \"DOING\" , \"DONE\" and i can use it like\r\n// Categories.TO_DO. so it help no to make mistake\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: \"TO_DO\" | \"DOING\" | \"DONE\";\r\n}\r\n\r\nexport const categoryState = atom<IToDo[\"category\"]>({\r\n  key: \"category\",\r\n  default: \"TO_DO\",\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: [],\r\n  effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    // get : (options) options is object. and in side of the object,\r\n    // there is \"get\" and get can bring atom inside of my selector \"get(toDoState)\"\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n\r\n/*Selector는 파생된 state(derived state)의 일부를 나타낸다.\r\n즉, 기존 state를 가져와서, 기존 state를 이용해 새로운 state를 만들어서 반환할 수 있다. 기존 state를 이용만할 뿐 변형시키지 않는다 */\r\n","import { useForm } from \"react-hook-form\";\r\nimport { atom, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { text: toDo, id: Date.now(), category },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", { required: \"to Do is requied \" })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <span></span>\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { IToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as IToDo[\"category\"] };\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n\r\n  const deleteToDo = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== \"DOING\" && (\r\n        <button name=\"DOING\" onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== \"TO_DO\" && (\r\n        <button name=\"TO_DO\" onClick={onClick}>\r\n          To Do\r\n        </button>\r\n      )}\r\n      {category !== \"DONE\" && (\r\n        <button name=\"DONE\" onClick={onClick}>\r\n          Done\r\n        </button>\r\n      )}\r\n      <button onClick={deleteToDo}>Delete</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, toDoSelector, toDoState } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  // register = name, onBlur, onChange ,ref 등 을 dafault 로 가지고 있음\r\n  // value of form 을 관찰할 수 있게 해줌\r\n  // handlesubmit will call fun after all validation is done\r\n  //formStae will give us what kind of error user would get\r\n\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>ToDo!!</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value=\"TO_DO\">To DO</option>\r\n        <option value=\"DOING\">Doing</option>\r\n        <option value=\"DONE\">Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\nimport React from \"react\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nfont-family: 'Source Sans Pro', sans-serif;\r\n  html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n  font-family: sans-serif;\r\n  background-color: grey;\r\n  color: white;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color:inherit;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <ToDoList />\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n// <ReactQueryDevtools initialIsOpen={true} /> exist for  <GlobalStyle />&<Router /> not to load api every time and also provide devtools\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { darkTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};\r\n"],"sourceRoot":""}